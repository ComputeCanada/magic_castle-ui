title MC Hub - Cluster Modification Workflow

participant User
participant Browser
participant Flask Server
participant Terraform

User->Browser: Navigates to localhost:5000/clusters/<cluster_name>.<domain>
activate Browser
Browser->Flask Server: Requests cluster modification form
activate Flask Server
Flask Server-->Browser: Cluster modification form
deactivate Flask Server
Browser-->User: Displays cluster modification form

Browser->Flask Server: Polls status
activate Flask Server
Flask Server-->Browser: Status: provisioning_success
deactivate Flask Server
Browser->Flask Server: Loads cluster state
activate Flask Server
Browser->Flask Server: Gets available OpenStack resources
Flask Server-->Browser: Cluster state
Flask Server-->Browser: Available OpenStack resources
deactivate Flask Server
Browser-->User: Displays cluster state and available resources
User->Browser: Modifies the desired form fields
User->Browser: Clicks on the "Apply" button
Browser-->User: Displays loading animation
Browser->Flask Server: Sends the form content
activate Flask Server
Flask Server->Flask Server: main.tf.json is modified with the form variables
Flask Server->Terraform: terraform init
activate Terraform
Flask Server->Terraform: terraform plan
Terraform-->Flask Server: Plan's raw output
deactivate Terraform
Flask Server-->Browser: Formatted plan
deactivate Flask Server
Browser-->User: Displays plan
User->Browser: Clicks "ok" to confirm
Browser->>Flask Server: Applies the plan
activate Flask Server
Flask Server->Terraform: terraform apply
activate Terraform
Browser->Flask Server: Polls status
activate Flask Server
Flask Server-->Browser: Status: build_running
deactivate Flask Server
Terraform-->Flask Server: terraform apply return code
deactivate Terraform
Browser->Flask Server: Polls status
activate Flask Server
Flask Server-->Browser: Status: provisioning_running
deactivate Flask Server
Browser->Flask Server: Loads cluster state
activate Flask Server
Browser->Flask Server: Gets available OpenStack resources
Flask Server-->Browser: Cluster state
Flask Server-->Browser: Available OpenStack resources
deactivate Flask Server
Browser-->User: Displays cluster state and available resources
Flask Server->Cluster: Polls JupyterHub URL
activate Cluster
Cluster-->Flask Server: Connection timeout
deactivate Cluster
Flask Server->Cluster: Polls FreeIPA URL
activate Cluster
Cluster-->Flask Server: Connection timeout
deactivate Cluster
Browser->Flask Server: Polls status
activate Flask Server
Flask Server-->Browser: Status: provisioning_running
deactivate Flask Server
Flask Server->Cluster: Polls JupyterHub URL
activate Cluster
Cluster-->Flask Server: 200 status code
deactivate Cluster
Flask Server->Cluster: Polls FreeIPA URL
activate Cluster
Cluster-->Flask Server: 200 status code
deactivate Cluster
deactivate Flask Server
Browser->Flask Server: Polls status
activate Flask Server
Flask Server-->Browser: Status: provisioning_success
deactivate Flask Server
Browser-->User: Displays success dialog
